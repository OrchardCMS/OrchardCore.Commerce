@using System.Text.Json;
@*@using Newtonsoft.Json;*@
@using OrchardCore.Commerce.Abstractions;
@using OrchardCore.Commerce.Indexes;
@using OrchardCore.Commerce.Models;
@using OrchardCore.Commerce.MoneyDataType.Abstractions;
@using OrchardCore.Commerce.Settings;
@using OrchardCore.ContentManagement;
@using YesSql;

@model OrderPartViewModel

@inject IMoneyService MoneyService
@inject ISession Session
@inject IPredefinedValuesProductAttributeService AttributesService

@{
    var m = Model;

    var availableCurrencyCodes = MoneyService.Currencies.Select(currency => currency.CurrencyIsoCode);
    var defaultCurrencyCode = MoneyService.DefaultCurrency.CurrencyIsoCode ?? "USD";

    // maybe do these, or at least part of these, in the driver? also add a <string, string> dictionary property for attribute values in OrderLineItemViewModel

    // list all predefined text attributes and add disclaimer that warns to only fill out the ones that are relevant to the product?
    // and if the specified product (via its SKU) does not have the selected attributes, add model error

    // get predefined attributes and create dropdowns based on them?
    // the label next to the input field should be the FieldName property's value

    // get all products, filter for those that have price variant part, then filter for those that have predefined attributes?
    var allProducts = await Session.Query<ContentItem, ProductPartIndex>().ListAsync();
    var allPriceVariantProducts = allProducts.Where(product => product.As<PriceVariantsPart>() != null);

    var availableAttributes = new Dictionary<string, List<string>>();
    foreach (var priceVariant in allPriceVariantProducts)
    {
        // doesn't work in an Order with no PriceVariantProduct already present??
        var attributes = AttributesService.GetProductAttributesRestrictedToPredefinedValues(priceVariant);
        foreach (var attr in attributes)
        {
            var predefinedStrings = new List<string>();

            var predefinedValues = (attr.Settings as TextProductAttributeFieldSettings).PredefinedValues;
            predefinedStrings.AddRange(predefinedValues.Select(value => value.ToString()));

            availableAttributes.TryAdd(attr.Name, predefinedStrings);

            // Also need to add potential new values to an already existing key.
            var existingValues = availableAttributes[attr.Name];
            var valuesToAdd = predefinedStrings.Where(predefinedValue => !existingValues.Contains(predefinedValue));
            availableAttributes[attr.Name].AddRange(valuesToAdd);
        }
    }

    var serializedDictionary = JsonSerializer.Serialize(availableAttributes);
    var rr = "2;";
}

<section id="shopping-cart">
    <div class="panel-heading">
        <h3>@T["Ordered Items"]</h3>
    </div>
    <div class="container">
        <div class="d-none d-sm-flex row border-bottom mt-3 pb-2 font-weight-bold">
            <div class="col-xs-12 col-sm-2">@T["Product Name"]</div>
            <div class="col-xs-12 col-sm-2">@T["Quantity"]</div>
            <div class="col-xs-12 col-sm-2">@T["Product SKU"]</div>
            <div class="col-xs-12 col-sm-2">@T["Unit Price Value"]</div>
            <div class="col-xs-12 col-sm-1">@T["Unit Price Currency"]</div>
            <div class="col-xs-12 col-sm-2">@T["Attributes"]</div>
            <div class="col-xs-12 col-sm-1">@T["Actions"]</div>
        </div>
        <div id="orderPart__products" class="orderPart__products">
            <div v-for="(lineItem, index) in lineItems">
                <div class="row border-bottom mt-3 pb-2">
                    <div class="col-xs-12 col-sm-2 d-flex">
                        <a :href="lineItem.productUrl">{{ lineItem.productName }}</a>
                    </div>
                    <div class="col-xs-12 col-sm-2 d-flex">
                        <input :name="'OrderPart.LineItems[' + index + '].Quantity'" v-model="lineItem.quantity">
                    </div>
                    <div class="col-xs-12 col-sm-2 d-flex">
                        <input :name="'OrderPart.LineItems[' + index + '].ProductSku'" v-model="lineItem.productSku">
                    </div>
                    <div class="col-xs-12 col-sm-2 d-flex">
                        <input :name="'OrderPart.LineItems[' + index + '].UnitPriceValue'" v-model="lineItem.unitPriceValue">
                    </div>
                    <div class="col-xs-12 col-sm-1 d-flex">
                        <select :name="'OrderPart.LineItems[' + index + '].UnitPriceCurrencyIsoCode'" v-model="lineItem.unitPriceCurrencyIsoCode">
                            @foreach (var currencyCode in availableCurrencyCodes)
                            {
                                <option value="@currencyCode">@currencyCode</option>
                            }
                        </select>
                    </div>
                    <div class="col-xs-12 col-sm-2 d-flex">
                        <div v-for="(values, key) in lineItem.availableAttributes">
                            <label>{{ key }}</label>
                            <select>
                                <option value=""></option>
                                <option v-for="value in values" value="value">{{ value }}</option>
                            </select>
                            @*{{ values }}*@
                        </div>
                        @*<input :name="'OrderPart.LineItems[' + index + '].UnitPriceValue'" v-model="lineItem.unitPriceValue">*@
                    </div>
                    <div class="col-xs-12 col-sm-1">
                        <button class="btn btn-danger" @@click.prevent="lineItems.splice(index, 1)">
                            <i class="fa fa-trash" aria-hidden="true"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="row mt-3 mb-3 pb-2">
            <div class="col-xs-12 col-sm-10 font-weight-bold">@T["Total"]</div>
            <div class="col-xs-12 col-sm-1">
                <div>@Model.Total</div>
            </div>
        </div>
        <button id="addButton" class="btn btn-secondary mb-3">@T["Add Item"]</button>
    </div>

@*    @for (var line = 0; line < Model.LineItems.Count; line++)
    {
        var currentItem = Model.LineItems[line];
        <a href="@Url.RouteUrl(currentItem.ProductRouteValues)">@currentItem.ProductName</a>

    }
*@

@*    @if (Model.LineItems?.Any() == true)
    {
        <div class="container">
            <div class="d-none d-sm-flex row border-bottom mt-3 pb-2 font-weight-bold">
                <div class="col-xs-12 col-sm-2">@T["Quantity"]</div>
                <div class="col-xs-12 col-sm-4">@T["Product"]</div>
                <div class="col-xs-12 col-sm-4">@T["Attributes"]</div>
                <div class="col-xs-12 col-sm-1">@T["Price"]</div>
            </div>

            @for (var line = 0; line < Model.LineItems.Count; line++)
            {
                var currentItem = Model.LineItems[line];

                <div class="row border-bottom mt-3 pb-2">
                    <div class="col-xs-12 col-sm-2 d-flex">
                        <p class="w-50">@currentItem.Quantity@T[" Ã— "]</p>
                        <input type="number" min="0" id="OrderPart_LineItems_@(line)_Quantity" name="OrderPart.LineItems[@(line)].Quantity" value="@currentItem.Quantity" class="form-control" />
                    </div>
                    <div class="col-xs-12 col-sm-4">
                        <a href="@Url.RouteUrl(currentItem.ProductRouteValues)">@currentItem.ProductName</a>
                        <input type="hidden" id="OrderPart_LineItems_@(line)_ProductSku" name="OrderPart.LineItems[@(line)].ProductSku" value="@currentItem.ProductSku" />
                    </div>

                    <div class="col-xs-12 col-sm-4">
                        @if (currentItem.Attributes != null)
                        {
                            <ul class="cart-product-attributes list-inline">
                                @foreach (var attribute in currentItem.Attributes.Where(value => value.UntypedValue != null))
                                {
                                    <shape tag="li"
                                           Type="@(attribute.GetType().Name)"
                                           prop-attribute="@(attribute)"
                                           prop-label="@(attribute.Label)" />
                                }
                            </ul>
                        }
                    </div>
                    <div class="col-xs-12 col-sm-1">@currentItem.UnitPrice</div>
                </div>
            }
            <div class="row mt-3 mb-3 pb-2">
                <div class="col-xs-12 col-sm-10 font-weight-bold">@T["Total"]</div>
                <div class="col-xs-12 col-sm-1">
                    <div>@Model.Total</div>
                </div>
            </div>
        </div>
    }
    else
    {
        <p>@T["This order is empty."]</p>
    }
*@
</section>
<div class="form-group">
    <div class="panel-heading">
        <label>@T["Charges"]</label>
    </div>
    @if (Model.Charges?.Any() == true)
    {
        @foreach (var charge in Model.Charges)
        {
            <div class="mt-3 mb-3">
                <div class="row">
                    <div class="col-md-6 col-lg-2">
                        <span>@T["Kind:"]</span>
                    </div>
                    <div class="col-md-6 col-lg-4">
                        <span>@charge.Kind</span>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 col-lg-2">
                        <span>@T["Amount:"]</span>
                    </div>
                    <div class="col-md-6 col-lg-4">
                        <span>@charge.Amount</span>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 col-lg-2">
                        <span>@T["Transaction Id:"]</span>
                    </div>
                    <div class="col-md-6 col-lg-4">
                        <span>@charge.TransactionId</span>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 col-lg-2">
                        <span>@T["Created:"]</span>
                    </div>
                    <div class="col-md-6 col-lg-4">
                        <span>@charge.CreatedUtc</span>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 col-lg-2">
                        <span>@T["Charge Text:"]</span>
                    </div>
                    <div class="col-md-6 col-lg-4">
                        <span>@charge.ChargeText</span>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <p>@T["There are no charges stored in this order."]</p>
    }
</div>

<script asp-name="@ResourceNames.ToggleSecondAddress" at="Foot"></script>
<script at="Head" asp-name="vuejs"></script>
<script at="Foot" depends-on="vuejs">
    const vueQuery = '#orderPart__products';
    let lineItems = @Json.Serialize(Model.LineItems);

    let availableAttributes = JSON.parse('@Html.Raw(serializedDictionary)');

    console.log(JSON.stringify(availableAttributes, null, 4));

    const dictionary = {};

    // isnt this the same as the parsed JSON lmao
    //for (const key in availableAttributes) {
    //    if (availableAttributes.hasOwnProperty(key)) {
    //        dictionary[key] = availableAttributes[key];
    //    }
    //}

    //console.log(JSON.stringify(dictionary, null, 4));

    // add dictionary in here?
    lineItems.forEach(item => {
        item.productUrl = '/Admin/Contents/ContentItems/' + item.productRouteValues.ContentItemId + '/Edit';
        item.availableAttributes = availableAttributes;
    })

    var products = new Vue({
        el: vueQuery,
        data: { lineItems: lineItems },
    });

    document.getElementById('addButton').addEventListener('click', function (event) {
        event.preventDefault();
        products.lineItems.push({
            "productName": null,
            "productUrl": null,
            "quantity": null,
            "productSku": null,
            "unitPriceValue": null,
            "unitPriceCurrencyIsoCode": '@defaultCurrencyCode',
            "availableAttributes": null,
        });

        // could set the new currency selector to the value of an existing selector -> add disclaimer instead
    });
</script>
