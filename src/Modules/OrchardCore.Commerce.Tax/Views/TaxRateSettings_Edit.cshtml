@model TaxRateSettings

@{
    const string regexDocsUrl = "https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions";

    const string blockName = "taxRateSettings";
    const string tableElement = blockName + "__table";
    const string addButtonElement = blockName + "__addButton";

    var blockGuid = Guid.NewGuid().ToString("N");
    var tableElementId = $"{tableElement}_{blockGuid}";
    var addButtonElementId = $"{addButtonElement}_{blockGuid}";
}

<h2>@T["Source Address"]</h2>

<div class="mb-3" asp-validation-class-for="SourceStreetAddress1">
    <label asp-for="SourceStreetAddress1">@T["First street address"]</label>
    <input asp-for="SourceStreetAddress1" class="form-control" type="text"/>
    <span asp-validation-for="SourceStreetAddress1"></span>
</div>

<div class="mb-3" asp-validation-class-for="SourceStreetAddress2">
    <label asp-for="SourceStreetAddress2">@T["Second street address"]</label>
    <input asp-for="SourceStreetAddress2" class="form-control" type="text"/>
    <span asp-validation-for="SourceStreetAddress2"></span>
</div>

<div class="mb-3" asp-validation-class-for="SourceCity">
    <label asp-for="SourceCity">@T["City"]</label>
    <input asp-for="SourceCity" class="form-control" type="text"/>
    <span asp-validation-for="SourceCity"></span>
</div>

<div class="mb-3" asp-validation-class-for="SourceProvince">
    <label asp-for="SourceProvince">@T["State or province"]</label>
    <input asp-for="SourceProvince" class="form-control" type="text"/>
    <span asp-validation-for="SourceProvince"></span>
</div>

<div class="mb-3" asp-validation-class-for="SourcePostalCode">
    <label asp-for="SourcePostalCode">@T["Postal code"]</label>
    <input asp-for="SourcePostalCode" class="form-control" type="text"/>
    <span asp-validation-for="SourcePostalCode"></span>
</div>

<div class="mb-3" asp-validation-class-for="SourceRegion">
    <label asp-for="SourceRegion">@T["Country or region"]</label>
    <input asp-for="SourceRegion" class="form-control" type="text"/>
    <span asp-validation-for="SourceRegion"></span>
</div>

<h2>@T["Recipients and Tax Codes"]</h2>

<table id="@tableElementId" class="table @tableElement">
    <thead>
    <tr>
        <th>@T["First street address"]</th>
        <th>@T["Second street address"]</th>
        <th>@T["City"]</th>
        <th>@T["State or province"]</th>
        <th>@T["Postal code"]</th>
        <th>@T["Country or region code"]</th>
        <th>@T["Tax Code"]</th>
        <th>@T["Tax Rate (%)"]</th>
    </tr>
    </thead>

    <tbody>
    </tbody>
</table>

<div class="mb-3">
    <span class="hint">
        @T["All text fields in the table have to be either empty or contain a valid regular expression."]
        @T["Learn more about regular expressions in .NET <a href=\"{0}\">here</a>.", regexDocsUrl]
    </span>
</div>

<button id="@addButtonElementId" class="@addButtonElement btn btn-secondary mb-3">@T["Add Row"]</button>

<script at="Foot" depends-on="jQuery">
jQuery(function ($) {
    const $addButton = $("#@addButtonElementId");
    const $tbody = $("#@tableElementId tbody");

    function addRow(data, index) {
        const tr = document.createElement('tr');

        tr.innerHTML = `
            <td><input name="ISite.Rates[${index}].DestinationStreetAddress1" class="address1"></td>
            <td><input name="ISite.Rates[${index}].DestinationStreetAddress2" class="address2"></td>
            <td><input name="ISite.Rates[${index}].DestinationCity" class="city"></td>
            <td><input name="ISite.Rates[${index}].DestinationProvince" class="province"></td>
            <td><input name="ISite.Rates[${index}].DestinationPostalCode" class="postal-code"></td>
            <td><input name="ISite.Rates[${index}].DestinationRegion" class="region"></td>
            <td><input name="ISite.Rates[${index}].TaxCode" class="tax-code"></td>
            <td><input name="ISite.Rates[${index}].TaxRate" class="tax-rate" value="0" type="number" min="0" max="100"></td>`;

        tr.querySelector('.address1').value = data.destinationStreetAddress1 ?? '';
        tr.querySelector('.address2').value = data.destinationStreetAddress2 ?? '';
        tr.querySelector('.city').value = data.destinationCity ?? '';
        tr.querySelector('.province').value = data.destinationProvince ?? '';
        tr.querySelector('.postal-code').value = data.destinationPostalCode ?? '';
        tr.querySelector('.region').value = data.destinationRegion ?? '';
        tr.querySelector('.tax-code').value = data.taxCode ?? '';
        if (!Number.isNaN(data.taxRate)) tr.querySelector('.tax-rate').value = data.taxRate;

        $tbody.append(tr);
    }

    const rates = @Json.Serialize(Model.Rates);
    let rowCount = rates.length;
    rates.forEach((data, index) => addRow(data, index));

    $addButton.click(function () {
        addRow({}, ++rowCount);
        return false;
    });
});
</script>
