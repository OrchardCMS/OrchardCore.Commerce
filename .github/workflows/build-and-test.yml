name: Build and Test

# Runs for PRs opened for any branch, and pushes to the main branch.
on:
  pull_request:
  push:
    branches:
      - main

jobs:
  call-build-and-test-workflow:
    name: Build and Test
    uses: Lombiq/GitHub-Actions/.github/workflows/build-and-test-orchard-core.yml@dev
    with:
      machine-types: '["ubuntu-latest", "windows-latest"]'
      timeout-minutes: 60

  spelling:
    name: Spelling
    uses: Lombiq/GitHub-Actions/.github/workflows/spelling.yml@dev
    with:
      additional-dictionaries: |
        cspell:csharp/csharp.txt
        cspell:html/dict/html.txt
        lombiq-lgha:dictionaries/Liquid.txt
        lombiq-lgha:dictionaries/Lombiq.people.txt

  post-pull-request-checks-automation:
    needs: [call-build-and-test-workflow, spelling]
    if: github.event.pull_request != ''
    uses: Lombiq/GitHub-Actions/.github/workflows/post-pull-request-checks-automation.yml@dev
    secrets:
      JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
      JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
      JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      MERGE_TOKEN: ${{ secrets.LOMBIQBOT_GITHUB_PERSONAL_ACCESS_TOKEN }}
    with:
      merge-method: "squash"

  synchronize-with-crowdin:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: Lombiq/GitHub-Actions/.github/actions/checkout@dev

      - name: Set up .NET
        uses: Lombiq/GitHub-Actions/.github/actions/setup-dotnet@dev

      - name: Use PoExtractor and Upload Files
        shell: pwsh
        run: |
          dotnet tool install --global OrchardCoreContrib.PoExtractor
          extractpo . Translations
          if (-not (Test-Path .\Translations\*.pot)) { echo '::error::No POT files were found.'; echo exit 1; }
          
          $arguments = @(
            '--rm'
            '--mount', "type=bind,source=$PWD,target=/data"
            'crowdin/cli'
            'sh', '-c', 'cd /data/Translations; sh update-crowdin.sh ${{ secrets.CROWDIN_PROJECT_ID }} ${{ secrets.CROWDIN_PERSONAL_TOKEN }}'
          )
          docker run @arguments